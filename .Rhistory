geom_point(shape=21, color="black", fill="white", size=1, stroke=1) +
labs(title = "Ljung-Box Test P-values", x = "Lag", y = "P-Value") +
theme_minimal() +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "blue") # Add a significance threshold
final <- (plot1 / acf_plot / pvalues_plot) +
plot_annotation(title = paste("Modelo",toupper(modelo),"de", acao))
path <- paste0("/home/felipe/Documentos/IC/Codigo/Previsao/Expandido/Graficos_Res/",
acao, "_", toupper(modelo), "_res.jpeg")
ggsave(filename = path, plot = final, width = 8, height = 6, dpi = 300)
return(final)
}
res_graficos("lstar", "FCF")
res_graficos <- function(modelo, acao){ # Função que retorna os quatro gráficos
# de análise de resíduos
# Transformações necessárias
df <- dados[acao]
df <- df %>% as_tibble()
df[[acao]] <- as.double(df[[acao]])
df <- df %>% drop_na()
df$Return <- 100 * log(df[[acao]] / lag(df[[acao]]))
df <- df[-1,]
retornos <- na.omit(df$Return)
ws <- floor(length(retornos) * 0.3)
ns <- length(retornos) - ws
for (i in 0:(ws - 1)){ # Seleciona a primeira série com as condições desejadas
r <- retornos[1 + i:ns + i]
acf1 <- verifica_primeiro_acf(r)
bds <- bds_test(r, 5)
if(bds == 1 && acf1 == 1){
break
} else{
next
}
}
# Verifica qual modelo é
fit_setar <- tsDyn::setar(r, m=2, d=1)
fit_lstar <- tsDyn::lstar(r, m=2, d=1)
fit_ar <- arma(r, c(1,0))
if (modelo == "setar"){
res <- fit_setar$residuals
} else if (modelo == "lstar"){
res <- fit_lstar$residuals
} else if (modelo == "ar"){
res <- residuals(fit_ar)
}else{
return(0)
}
std_res <- res / sd(res)
# Gráfico da série temporal dos resíduos padronizados
plot1 <- ggplot(data.frame(Index = time(std_res), Residuals = std_res),
aes(x = Index, y = std_res)) +
geom_line() +
labs(title = "Standardized Residuals", x = "Time", y = "Residuals") +
theme_minimal()
# Gráfico da FAC dos resíduos padronizados
#acf_result <- acf(std_res, plot = FALSE)
#acf_df <- data.frame(
#    lag = acf_result$lag[-1],
#    acf = acf_result$acf[-1]
#)
#acf_plot <- ggplot(acf_df, aes(x = lag, y = acf)) +
#   geom_bar(stat = "identity", width = 0.2, fill = "black") +  # Adjust the width here (e.g., 0.7)
#  geom_hline(yintercept = 0.05, linetype = "dashed", color = "blue") +
# geom_hline(yintercept = - 0.05, linetype = "dashed", color = "blue") +
#theme_minimal() +
#labs(title = "ACF of Residuals", x = "Lag", y = "ACF")
# Forma alternativa da FAC dos residuos padronizados
acf_plot <- autoplot(acf(std_res,
main = "ACF of Residuals",  # Title
lag.max = 20,               # Maximum number of lags to plot
col = "blue",               # Color of the bars
ci.col = "red", plot = FALSE))             # Color of confidence intervals
# Gráfico dos pvalores do teste de Ljung-Box
max_lag <- 20
p_values <- sapply(1:max_lag, function(lag) {
test <- Box.test(std_res, lag=lag, type="Ljung-Box")
test$p.value
})
p_values_df <- data.frame(Lag = 1:max_lag, P_Value = p_values)
pvalues_plot <- ggplot(p_values_df, aes(x = Lag, y = P_Value)) +
geom_point(shape=21, color="black", fill="white", size=1, stroke=1) +
labs(title = "Ljung-Box Test P-values", x = "Lag", y = "P-Value") +
theme_minimal() +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "blue") # Add a significance threshold
final <- (plot1 / acf_plot / pvalues_plot) +
plot_annotation(title = paste("Modelo",toupper(modelo),"de", acao))
path <- paste0("/home/felipe/Documentos/IC/Codigo/Previsao/Expandido/Graficos_Res/",
acao, "_", toupper(modelo), "_res.jpeg")
ggsave(filename = path, plot = final, width = 8, height = 6, dpi = 300)
return(final)
}
res_graficos("lstar", "FCF")
res_graficos <- function(modelo, acao){ # Função que retorna os quatro gráficos
# de análise de resíduos
# Transformações necessárias
df <- dados[acao]
df <- df %>% as_tibble()
df[[acao]] <- as.double(df[[acao]])
df <- df %>% drop_na()
df$Return <- 100 * log(df[[acao]] / lag(df[[acao]]))
df <- df[-1,]
retornos <- na.omit(df$Return)
ws <- floor(length(retornos) * 0.3)
ns <- length(retornos) - ws
for (i in 0:(ws - 1)){ # Seleciona a primeira série com as condições desejadas
r <- retornos[1 + i:ns + i]
acf1 <- verifica_primeiro_acf(r)
bds <- bds_test(r, 5)
if(bds == 1 && acf1 == 1){
break
} else{
next
}
}
# Verifica qual modelo é
fit_setar <- tsDyn::setar(r, m=2, d=1)
fit_lstar <- tsDyn::lstar(r, m=2, d=1)
fit_ar <- arima(r, c(1,0,0))
if (modelo == "setar"){
res <- fit_setar$residuals
} else if (modelo == "lstar"){
res <- fit_lstar$residuals
} else if (modelo == "ar"){
res <- residuals(fit_ar)
}else{
return(0)
}
std_res <- res / sd(res)
# Gráfico da série temporal dos resíduos padronizados
plot1 <- ggplot(data.frame(Index = time(std_res), Residuals = std_res),
aes(x = Index, y = std_res)) +
geom_line() +
labs(title = "Standardized Residuals", x = "Time", y = "Residuals") +
theme_minimal()
# Gráfico da FAC dos resíduos padronizados
#acf_result <- acf(std_res, plot = FALSE)
#acf_df <- data.frame(
#    lag = acf_result$lag[-1],
#    acf = acf_result$acf[-1]
#)
#acf_plot <- ggplot(acf_df, aes(x = lag, y = acf)) +
#   geom_bar(stat = "identity", width = 0.2, fill = "black") +  # Adjust the width here (e.g., 0.7)
#  geom_hline(yintercept = 0.05, linetype = "dashed", color = "blue") +
# geom_hline(yintercept = - 0.05, linetype = "dashed", color = "blue") +
#theme_minimal() +
#labs(title = "ACF of Residuals", x = "Lag", y = "ACF")
# Forma alternativa da FAC dos residuos padronizados
acf_plot <- autoplot(acf(std_res,
main = "ACF of Residuals",  # Title
lag.max = 40,               # Maximum number of lags to plot
col = "blue",               # Color of the bars
ci.col = "red", plot = FALSE))             # Color of confidence intervals
# Gráfico dos pvalores do teste de Ljung-Box
max_lag <- 20
p_values <- sapply(1:max_lag, function(lag) {
test <- Box.test(std_res, lag=lag, type="Ljung-Box")
test$p.value
})
p_values_df <- data.frame(Lag = 1:max_lag, P_Value = p_values)
pvalues_plot <- ggplot(p_values_df, aes(x = Lag, y = P_Value)) +
geom_point(shape=21, color="black", fill="white", size=1, stroke=1) +
labs(title = "Ljung-Box Test P-values", x = "Lag", y = "P-Value") +
theme_minimal() +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "blue") # Add a significance threshold
final <- (plot1 / acf_plot / pvalues_plot) +
plot_annotation(title = paste("Modelo",toupper(modelo),"de", acao))
path <- paste0("/home/felipe/Documentos/IC/Codigo/Previsao/Expandido/Graficos_Res/",
acao, "_", toupper(modelo), "_res.jpeg")
ggsave(filename = path, plot = final, width = 8, height = 6, dpi = 300)
return(final)
}
res_graficos("lstar", "FCF")
res_graficos <- function(modelo, acao){ # Função que retorna os quatro gráficos
# de análise de resíduos
# Transformações necessárias
df <- dados[acao]
df <- df %>% as_tibble()
df[[acao]] <- as.double(df[[acao]])
df <- df %>% drop_na()
df$Return <- 100 * log(df[[acao]] / lag(df[[acao]]))
df <- df[-1,]
retornos <- na.omit(df$Return)
ws <- floor(length(retornos) * 0.3)
ns <- length(retornos) - ws
for (i in 0:(ws - 1)){ # Seleciona a primeira série com as condições desejadas
r <- retornos[1 + i:ns + i]
acf1 <- verifica_primeiro_acf(r)
bds <- bds_test(r, 5)
if(bds == 1 && acf1 == 1){
break
} else{
next
}
}
# Verifica qual modelo é
fit_setar <- tsDyn::setar(r, m=2, d=1)
fit_lstar <- tsDyn::lstar(r, m=2, d=1)
fit_ar <- arima(r, c(1,0,0))
if (modelo == "setar"){
res <- fit_setar$residuals
} else if (modelo == "lstar"){
res <- fit_lstar$residuals
} else if (modelo == "ar"){
res <- residuals(fit_ar)
}else{
return(0)
}
std_res <- res / sd(res)
# Gráfico da série temporal dos resíduos padronizados
plot1 <- ggplot(data.frame(Index = time(std_res), Residuals = std_res),
aes(x = Index, y = std_res)) +
geom_line() +
labs(title = "Standardized Residuals", x = "Time", y = "Residuals") +
theme_minimal()
# Gráfico da FAC dos resíduos padronizados
#acf_result <- acf(std_res, plot = FALSE)
#acf_df <- data.frame(
#    lag = acf_result$lag[-1],
#    acf = acf_result$acf[-1]
#)
#acf_plot <- ggplot(acf_df, aes(x = lag, y = acf)) +
#   geom_bar(stat = "identity", width = 0.2, fill = "black") +  # Adjust the width here (e.g., 0.7)
#  geom_hline(yintercept = 0.05, linetype = "dashed", color = "blue") +
# geom_hline(yintercept = - 0.05, linetype = "dashed", color = "blue") +
#theme_minimal() +
#labs(title = "ACF of Residuals", x = "Lag", y = "ACF")
# Forma alternativa da FAC dos residuos padronizados
acf_plot <- autoplot(acf(std_res,
main = "ACF of Residuals",
lag.max = 40,
col = "blue",
ci.col = "red", plot = FALSE,
ylim = c(-0.2, 0.2)))
# Gráfico dos pvalores do teste de Ljung-Box
max_lag <- 20
p_values <- sapply(1:max_lag, function(lag) {
test <- Box.test(std_res, lag=lag, type="Ljung-Box")
test$p.value
})
p_values_df <- data.frame(Lag = 1:max_lag, P_Value = p_values)
pvalues_plot <- ggplot(p_values_df, aes(x = Lag, y = P_Value)) +
geom_point(shape=21, color="black", fill="white", size=1, stroke=1) +
labs(title = "Ljung-Box Test P-values", x = "Lag", y = "P-Value") +
theme_minimal() +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "blue") # Add a significance threshold
final <- (plot1 / acf_plot / pvalues_plot) +
plot_annotation(title = paste("Modelo",toupper(modelo),"de", acao))
path <- paste0("/home/felipe/Documentos/IC/Codigo/Previsao/Expandido/Graficos_Res/",
acao, "_", toupper(modelo), "_res.jpeg")
ggsave(filename = path, plot = final, width = 8, height = 6, dpi = 300)
return(final)
}
res_graficos("lstar", "FCF")
res_graficos <- function(modelo, acao){ # Função que retorna os quatro gráficos
# de análise de resíduos
# Transformações necessárias
df <- dados[acao]
df <- df %>% as_tibble()
df[[acao]] <- as.double(df[[acao]])
df <- df %>% drop_na()
df$Return <- 100 * log(df[[acao]] / lag(df[[acao]]))
df <- df[-1,]
retornos <- na.omit(df$Return)
ws <- floor(length(retornos) * 0.3)
ns <- length(retornos) - ws
for (i in 0:(ws - 1)){ # Seleciona a primeira série com as condições desejadas
r <- retornos[1 + i:ns + i]
acf1 <- verifica_primeiro_acf(r)
bds <- bds_test(r, 5)
if(bds == 1 && acf1 == 1){
break
} else{
next
}
}
# Verifica qual modelo é
fit_setar <- tsDyn::setar(r, m=2, d=1)
fit_lstar <- tsDyn::lstar(r, m=2, d=1)
fit_ar <- arima(r, c(1,0,0))
if (modelo == "setar"){
res <- fit_setar$residuals
} else if (modelo == "lstar"){
res <- fit_lstar$residuals
} else if (modelo == "ar"){
res <- residuals(fit_ar)
}else{
return(0)
}
std_res <- res / sd(res)
# Gráfico da série temporal dos resíduos padronizados
plot1 <- ggplot(data.frame(Index = time(std_res), Residuals = std_res),
aes(x = Index, y = std_res)) +
geom_line() +
labs(title = "Standardized Residuals", x = "Time", y = "Residuals") +
theme_minimal()
# Gráfico da FAC dos resíduos padronizados
#acf_result <- acf(std_res, plot = FALSE)
#acf_df <- data.frame(
#    lag = acf_result$lag[-1],
#    acf = acf_result$acf[-1]
#)
#acf_plot <- ggplot(acf_df, aes(x = lag, y = acf)) +
#   geom_bar(stat = "identity", width = 0.2, fill = "black") +  # Adjust the width here (e.g., 0.7)
#  geom_hline(yintercept = 0.05, linetype = "dashed", color = "blue") +
# geom_hline(yintercept = - 0.05, linetype = "dashed", color = "blue") +
#theme_minimal() +
#labs(title = "ACF of Residuals", x = "Lag", y = "ACF")
# Forma alternativa da FAC dos residuos padronizados
acf_plot <- autoplot(acf(std_res,
main = "ACF of Residuals",
lag.max = 40,
col = "blue",
ci.col = "red", plot = FALSE)) +
coord_cartesian(ylim = c(-0.2, 0.2))
# Gráfico dos pvalores do teste de Ljung-Box
max_lag <- 20
p_values <- sapply(1:max_lag, function(lag) {
test <- Box.test(std_res, lag=lag, type="Ljung-Box")
test$p.value
})
p_values_df <- data.frame(Lag = 1:max_lag, P_Value = p_values)
pvalues_plot <- ggplot(p_values_df, aes(x = Lag, y = P_Value)) +
geom_point(shape=21, color="black", fill="white", size=1, stroke=1) +
labs(title = "Ljung-Box Test P-values", x = "Lag", y = "P-Value") +
theme_minimal() +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "blue") # Add a significance threshold
final <- (plot1 / acf_plot / pvalues_plot) +
plot_annotation(title = paste("Modelo",toupper(modelo),"de", acao))
path <- paste0("/home/felipe/Documentos/IC/Codigo/Previsao/Expandido/Graficos_Res/",
acao, "_", toupper(modelo), "_res.jpeg")
ggsave(filename = path, plot = final, width = 8, height = 6, dpi = 300)
return(final)
}
res_graficos("lstar", "FCF")
res_graficos <- function(modelo, acao){ # Função que retorna os quatro gráficos
# de análise de resíduos
# Transformações necessárias
df <- dados[acao]
df <- df %>% as_tibble()
df[[acao]] <- as.double(df[[acao]])
df <- df %>% drop_na()
df$Return <- 100 * log(df[[acao]] / lag(df[[acao]]))
df <- df[-1,]
retornos <- na.omit(df$Return)
ws <- floor(length(retornos) * 0.3)
ns <- length(retornos) - ws
for (i in 0:(ws - 1)){ # Seleciona a primeira série com as condições desejadas
r <- retornos[1 + i:ns + i]
acf1 <- verifica_primeiro_acf(r)
bds <- bds_test(r, 5)
if(bds == 1 && acf1 == 1){
break
} else{
next
}
}
# Verifica qual modelo é
fit_setar <- tsDyn::setar(r, m=2, d=1)
fit_lstar <- tsDyn::lstar(r, m=2, d=1)
fit_ar <- arima(r, c(1,0,0))
if (modelo == "setar"){
res <- fit_setar$residuals
} else if (modelo == "lstar"){
res <- fit_lstar$residuals
} else if (modelo == "ar"){
res <- residuals(fit_ar)
}else{
return(0)
}
std_res <- res / sd(res)
# Gráfico da série temporal dos resíduos padronizados
plot1 <- ggplot(data.frame(Index = time(std_res), Residuals = std_res),
aes(x = Index, y = std_res)) +
geom_line() +
labs(title = "Standardized Residuals", x = "Time", y = "Residuals") +
theme_minimal()
# Gráfico da FAC dos resíduos padronizados
#acf_result <- acf(std_res, plot = FALSE)
#acf_df <- data.frame(
#    lag = acf_result$lag[-1],
#    acf = acf_result$acf[-1]
#)
#acf_plot <- ggplot(acf_df, aes(x = lag, y = acf)) +
#   geom_bar(stat = "identity", width = 0.2, fill = "black") +  # Adjust the width here (e.g., 0.7)
#  geom_hline(yintercept = 0.05, linetype = "dashed", color = "blue") +
# geom_hline(yintercept = - 0.05, linetype = "dashed", color = "blue") +
#theme_minimal() +
#labs(title = "ACF of Residuals", x = "Lag", y = "ACF")
# Forma alternativa da FAC dos residuos padronizados
acf_plot <- autoplot(acf(std_res,
main = "ACF of Residuals",
lag.max = 40,
col = "blue",
ci.col = "red", plot = FALSE)) +
coord_cartesian(ylim = c(-0.1, 0.1))
# Gráfico dos pvalores do teste de Ljung-Box
max_lag <- 20
p_values <- sapply(1:max_lag, function(lag) {
test <- Box.test(std_res, lag=lag, type="Ljung-Box")
test$p.value
})
p_values_df <- data.frame(Lag = 1:max_lag, P_Value = p_values)
pvalues_plot <- ggplot(p_values_df, aes(x = Lag, y = P_Value)) +
geom_point(shape=21, color="black", fill="white", size=1, stroke=1) +
labs(title = "Ljung-Box Test P-values", x = "Lag", y = "P-Value") +
theme_minimal() +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "blue") # Add a significance threshold
final <- (plot1 / acf_plot / pvalues_plot) +
plot_annotation(title = paste("Modelo",toupper(modelo),"de", acao))
path <- paste0("/home/felipe/Documentos/IC/Codigo/Previsao/Expandido/Graficos_Res/",
acao, "_", toupper(modelo), "_res.jpeg")
ggsave(filename = path, plot = final, width = 8, height = 6, dpi = 300)
return(final)
}
res_graficos("lstar", "FCF")
res_graficos <- function(modelo, acao){ # Função que retorna os quatro gráficos
# de análise de resíduos
# Transformações necessárias
df <- dados[acao]
df <- df %>% as_tibble()
df[[acao]] <- as.double(df[[acao]])
df <- df %>% drop_na()
df$Return <- 100 * log(df[[acao]] / lag(df[[acao]]))
df <- df[-1,]
retornos <- na.omit(df$Return)
ws <- floor(length(retornos) * 0.3)
ns <- length(retornos) - ws
for (i in 0:(ws - 1)){ # Seleciona a primeira série com as condições desejadas
r <- retornos[1 + i:ns + i]
acf1 <- verifica_primeiro_acf(r)
bds <- bds_test(r, 5)
if(bds == 1 && acf1 == 1){
break
} else{
next
}
}
# Verifica qual modelo é
fit_setar <- tsDyn::setar(r, m=2, d=1)
fit_lstar <- tsDyn::lstar(r, m=2, d=1)
fit_ar <- arima(r, c(1,0,0))
if (modelo == "setar"){
res <- fit_setar$residuals
} else if (modelo == "lstar"){
res <- fit_lstar$residuals
} else if (modelo == "ar"){
res <- residuals(fit_ar)
}else{
return(0)
}
std_res <- res / sd(res)
# Gráfico da série temporal dos resíduos padronizados
plot1 <- ggplot(data.frame(Index = time(std_res), Residuals = std_res),
aes(x = Index, y = std_res)) +
geom_line() +
labs(title = "Standardized Residuals", x = "Time", y = "Residuals") +
theme_minimal()
# Gráfico da FAC dos resíduos padronizados
#acf_result <- acf(std_res, plot = FALSE)
#acf_df <- data.frame(
#    lag = acf_result$lag[-1],
#    acf = acf_result$acf[-1]
#)
#acf_plot <- ggplot(acf_df, aes(x = lag, y = acf)) +
#   geom_bar(stat = "identity", width = 0.2, fill = "black") +  # Adjust the width here (e.g., 0.7)
#  geom_hline(yintercept = 0.05, linetype = "dashed", color = "blue") +
# geom_hline(yintercept = - 0.05, linetype = "dashed", color = "blue") +
#theme_minimal() +
#labs(title = "ACF of Residuals", x = "Lag", y = "ACF")
# Forma alternativa da FAC dos residuos padronizados
acf_plot <- autoplot(acf(std_res,
main = "ACF of Residuals",
lag.max = 40,
col = "blue",
ci.col = "red", plot = FALSE))
# Gráfico dos pvalores do teste de Ljung-Box
max_lag <- 20
p_values <- sapply(1:max_lag, function(lag) {
test <- Box.test(std_res, lag=lag, type="Ljung-Box")
test$p.value
})
p_values_df <- data.frame(Lag = 1:max_lag, P_Value = p_values)
pvalues_plot <- ggplot(p_values_df, aes(x = Lag, y = P_Value)) +
geom_point(shape=21, color="black", fill="white", size=1, stroke=1) +
labs(title = "Ljung-Box Test P-values", x = "Lag", y = "P-Value") +
theme_minimal() +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "blue") # Add a significance threshold
final <- (plot1 / acf_plot / pvalues_plot) +
plot_annotation(title = paste("Modelo",toupper(modelo),"de", acao))
path <- paste0("/home/felipe/Documentos/IC/Codigo/Previsao/Expandido/Graficos_Res/",
acao, "_", toupper(modelo), "_res.jpeg")
ggsave(filename = path, plot = final, width = 8, height = 6, dpi = 300)
return(final)
}
res_graficos("lstar", "FCF")
res_graficos("setar", "FCF")
res_graficos("setar", "FCF")
res_graficos("ar", "FCF")
res_graficos("setar","FCF")
res_graficos("lstar","FCF")
res_graficos("setar", "IO")
res_graficos("ar", "IO")
res_graficos("lstar","IO")
res_graficos("setar", "HY")
res_graficos("ar", "HY")
res_graficos("lstar","HY")
res_graficos("setar", "CSR")
res_graficos("ar", "CSR")
res_graficos("lstar","CSR")
res_graficos("setar", "DHX")
res_graficos("ar", "DHX")
res_graficos("lstar","DHX")
